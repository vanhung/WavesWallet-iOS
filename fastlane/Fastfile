load 'enviroments.ruby' 
load 'resources.ruby'
load 'certificates.ruby'
load 'upload_build.ruby'

require 'fastlane_core/helper'
require 'fastlane' 

# import the actual plugin
fastlane_require 'open-uri'
fastlane_require 'credentials_manager'
fastlane_require 'dotenv/load'
fastlane_require 'dotenv'
fastlane_require 'json'
fastlane_require 'uri'
fastlane_require "versionomy"
fastlane_require "spaceship"

default_platform(:ios)

before_all do
    
  Dotenv.overload ".env"
  
  ENV['ROOT_PROJECT']= "#{Dir.pwd}/.."
  ENV['OUTPUT_PROJECT']= "#{Dir.pwd}/../Output"

  ENV['MATCH_KEYCHAIN_NAME']="login.keychain"
  
  sh("security find-identity -v -p codesigning fastlane_tmp_keychain")  
  sh("security find-identity -v -p codesigning fastlane_tmp_keychain")

  if Dir["#{ENV['OUTPUT_PROJECT']}"].empty? 
    sh("mkdir #{ENV['OUTPUT_PROJECT']}")
  end
  
  get_version_and_build  
end

platform :ios do

  lane :dev_build_projet do
    dev_enviroment    
    build_projet
  end

  lane :test_build_projet do
    test_enviroment    
    build_projet    
  end

  lane :prod_build_projet do
    prod_enviroment    
    build_projet    
  end

  lane :prod_adhoc_build_projet do
    prod_adhoc_enviroment    
    build_projet    
  end

  lane :test_upload_testflight do
    test_enviroment
    upload_testflight
  end
  
  lane :prod_upload_testflight do
    prod_enviroment
    upload_testflight 
  end

  lane :prod_adhoc_upload_firebase do
    prod_adhoc_enviroment
    upload_firebase
  end
  
  lane :dev_install do
    dev_enviroment
    download_certificates
    download_resources
  end

  lane :prod_install do
    prod_enviroment
    download_certificates
    download_resources
  end
  
  lane :test_install do
    test_enviroment
    download_certificates
    download_resources
  end

  lane :dev_download_resources do
    dev_enviroment    
    download_resources
  end
  
  lane :dev_add_new_devices do
    dev_enviroment
    force_update_certificates_and_provisions
  end

  lane :add_new_devices do
    prod_install
    force_update_certificates_and_provisionss 
  end

  lane :prod_go do
    prod_install
    prod_build_projet
    prod_upload_testflight
  end

  lane :increment_build_number_and_commit_push do      
      
      increment_build_number
      get_version_and_build
      
      git_commit(path: ["#{ENV['ROOT_PROJECT']}/WavesWallet-iOS/Info.plist",
                        "#{ENV['ROOT_PROJECT']}/WavesWallet-iOS.xcodeproj"],
                  message: "Increment build number [ci skip]")
      push_to_git_remote
  end

  def get_version_and_build   
    ENV['BUILD_NUMBER'] = sh("/usr/libexec/PlistBuddy -c 'Print :CFBundleVersion' '#{Dir.pwd}/../WavesWallet-iOS/Info.plist'").gsub!(/[^0-9A-Za-z]/, '')
    ENV['VERSION'] = get_version_number(xcodeproj: "#{ENV['ROOT_PROJECT']}/WavesWallet-iOS.xcodeproj", target: "WavesWallet-iOS")      
  end

  # Собирает сборку и скачиваем ресурсы и сертификаты
  def build_projet

    download_certificates
    download_resources

    name = "#{ENV['SCHEME_PROJECT']}-v#{ENV['VERSION']}-#{ENV['BUILD_NUMBER']}"
		gym(scheme: "#{ENV['SCHEME_PROJECT']}",
        workspace: "WavesWallet-iOS.xcworkspace",
        include_bitcode: true,
        include_symbols: true,
        export_options: "#{ENV['EXPORT_OPTIONS']}",
        output_directory: "#{ENV['OUTPUT_PROJECT']}",
        output_name: name
    )
  end

end

