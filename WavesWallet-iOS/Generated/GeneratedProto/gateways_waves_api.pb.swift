// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: gateways_waves_api.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Gateways_GetWavesAssetBindingsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var direction: Gateways_GetWavesAssetBindingsRequest.Direction = .all

  var assetType: Gateways_GetWavesAssetBindingsRequest.AssetTypeFilter {
    get {return _assetType ?? Gateways_GetWavesAssetBindingsRequest.AssetTypeFilter()}
    set {_assetType = newValue}
  }
  /// Returns true if `assetType` has been explicitly set.
  var hasAssetType: Bool {return self._assetType != nil}
  /// Clears the value of `assetType`. Subsequent reads from it will return its default value.
  mutating func clearAssetType() {self._assetType = nil}

  var includesExternalAssetTicker: String = String()

  var includesWavesAsset: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Direction: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case all // = 0
    case deposit // = 1
    case withdrawal // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .all
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .all
      case 1: self = .deposit
      case 2: self = .withdrawal
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .all: return 0
      case .deposit: return 1
      case .withdrawal: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  struct AssetTypeFilter {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var assetType: Gateways_Asset.TypeEnum = .crypto

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _assetType: Gateways_GetWavesAssetBindingsRequest.AssetTypeFilter? = nil
}

#if swift(>=4.2)

extension Gateways_GetWavesAssetBindingsRequest.Direction: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Gateways_GetWavesAssetBindingsRequest.Direction] = [
    .all,
    .deposit,
    .withdrawal,
  ]
}

#endif  // swift(>=4.2)

struct Gateways_AssetBindingsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var assetBindings: [Gateways_AssetBinding] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ---
/// GetDepositTransferBinding | GetWithdrawalsTransferBinding
/// ---
struct Gateways_GetDepositTransferBindingRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var asset: String = String()

  var recipientAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Gateways_GetWithdrawalTransferBindingRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var asset: String = String()

  var recipientAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Gateways_GetTransferBindingResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var transferBinding: Gateways_TransferBinding {
    get {return _transferBinding ?? Gateways_TransferBinding()}
    set {_transferBinding = newValue}
  }
  /// Returns true if `transferBinding` has been explicitly set.
  var hasTransferBinding: Bool {return self._transferBinding != nil}
  /// Clears the value of `transferBinding`. Subsequent reads from it will return its default value.
  mutating func clearTransferBinding() {self._transferBinding = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _transferBinding: Gateways_TransferBinding? = nil
}

struct Gateways_CreateDepositTransferBindingRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var asset: String = String()

  var recipientAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Gateways_CreateWithdrawalTransferBindingRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var asset: String = String()

  var recipientAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Gateways_CreateTransferBindingResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var transferBinding: Gateways_TransferBinding {
    get {return _transferBinding ?? Gateways_TransferBinding()}
    set {_transferBinding = newValue}
  }
  /// Returns true if `transferBinding` has been explicitly set.
  var hasTransferBinding: Bool {return self._transferBinding != nil}
  /// Clears the value of `transferBinding`. Subsequent reads from it will return its default value.
  mutating func clearTransferBinding() {self._transferBinding = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _transferBinding: Gateways_TransferBinding? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "gateways"

extension Gateways_GetWavesAssetBindingsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetWavesAssetBindingsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "direction"),
    2: .standard(proto: "asset_type"),
    3: .standard(proto: "includes_external_asset_ticker"),
    4: .standard(proto: "includes_waves_asset"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.direction)
      case 2: try decoder.decodeSingularMessageField(value: &self._assetType)
      case 3: try decoder.decodeSingularStringField(value: &self.includesExternalAssetTicker)
      case 4: try decoder.decodeSingularStringField(value: &self.includesWavesAsset)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.direction != .all {
      try visitor.visitSingularEnumField(value: self.direction, fieldNumber: 1)
    }
    if let v = self._assetType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.includesExternalAssetTicker.isEmpty {
      try visitor.visitSingularStringField(value: self.includesExternalAssetTicker, fieldNumber: 3)
    }
    if !self.includesWavesAsset.isEmpty {
      try visitor.visitSingularStringField(value: self.includesWavesAsset, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateways_GetWavesAssetBindingsRequest, rhs: Gateways_GetWavesAssetBindingsRequest) -> Bool {
    if lhs.direction != rhs.direction {return false}
    if lhs._assetType != rhs._assetType {return false}
    if lhs.includesExternalAssetTicker != rhs.includesExternalAssetTicker {return false}
    if lhs.includesWavesAsset != rhs.includesWavesAsset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateways_GetWavesAssetBindingsRequest.Direction: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ALL"),
    1: .same(proto: "DEPOSIT"),
    2: .same(proto: "WITHDRAWAL"),
  ]
}

extension Gateways_GetWavesAssetBindingsRequest.AssetTypeFilter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Gateways_GetWavesAssetBindingsRequest.protoMessageName + ".AssetTypeFilter"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "asset_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.assetType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.assetType != .crypto {
      try visitor.visitSingularEnumField(value: self.assetType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateways_GetWavesAssetBindingsRequest.AssetTypeFilter, rhs: Gateways_GetWavesAssetBindingsRequest.AssetTypeFilter) -> Bool {
    if lhs.assetType != rhs.assetType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateways_AssetBindingsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AssetBindingsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "asset_bindings"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.assetBindings)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.assetBindings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.assetBindings, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateways_AssetBindingsResponse, rhs: Gateways_AssetBindingsResponse) -> Bool {
    if lhs.assetBindings != rhs.assetBindings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateways_GetDepositTransferBindingRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetDepositTransferBindingRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "asset"),
    2: .standard(proto: "recipient_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.asset)
      case 2: try decoder.decodeSingularStringField(value: &self.recipientAddress)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.asset.isEmpty {
      try visitor.visitSingularStringField(value: self.asset, fieldNumber: 1)
    }
    if !self.recipientAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientAddress, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateways_GetDepositTransferBindingRequest, rhs: Gateways_GetDepositTransferBindingRequest) -> Bool {
    if lhs.asset != rhs.asset {return false}
    if lhs.recipientAddress != rhs.recipientAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateways_GetWithdrawalTransferBindingRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetWithdrawalTransferBindingRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "asset"),
    2: .standard(proto: "recipient_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.asset)
      case 2: try decoder.decodeSingularStringField(value: &self.recipientAddress)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.asset.isEmpty {
      try visitor.visitSingularStringField(value: self.asset, fieldNumber: 1)
    }
    if !self.recipientAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientAddress, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateways_GetWithdrawalTransferBindingRequest, rhs: Gateways_GetWithdrawalTransferBindingRequest) -> Bool {
    if lhs.asset != rhs.asset {return false}
    if lhs.recipientAddress != rhs.recipientAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateways_GetTransferBindingResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTransferBindingResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transfer_binding"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._transferBinding)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._transferBinding {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateways_GetTransferBindingResponse, rhs: Gateways_GetTransferBindingResponse) -> Bool {
    if lhs._transferBinding != rhs._transferBinding {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateways_CreateDepositTransferBindingRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateDepositTransferBindingRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "asset"),
    2: .standard(proto: "recipient_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.asset)
      case 2: try decoder.decodeSingularStringField(value: &self.recipientAddress)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.asset.isEmpty {
      try visitor.visitSingularStringField(value: self.asset, fieldNumber: 1)
    }
    if !self.recipientAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientAddress, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateways_CreateDepositTransferBindingRequest, rhs: Gateways_CreateDepositTransferBindingRequest) -> Bool {
    if lhs.asset != rhs.asset {return false}
    if lhs.recipientAddress != rhs.recipientAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateways_CreateWithdrawalTransferBindingRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateWithdrawalTransferBindingRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "asset"),
    2: .standard(proto: "recipient_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.asset)
      case 2: try decoder.decodeSingularStringField(value: &self.recipientAddress)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.asset.isEmpty {
      try visitor.visitSingularStringField(value: self.asset, fieldNumber: 1)
    }
    if !self.recipientAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientAddress, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateways_CreateWithdrawalTransferBindingRequest, rhs: Gateways_CreateWithdrawalTransferBindingRequest) -> Bool {
    if lhs.asset != rhs.asset {return false}
    if lhs.recipientAddress != rhs.recipientAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateways_CreateTransferBindingResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateTransferBindingResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transfer_binding"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._transferBinding)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._transferBinding {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateways_CreateTransferBindingResponse, rhs: Gateways_CreateTransferBindingResponse) -> Bool {
    if lhs._transferBinding != rhs._transferBinding {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
