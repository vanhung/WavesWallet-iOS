// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: gateways_api.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ---
/// GetAssetBinding
/// ---
struct Gateways_GetAssetBindingRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var senderAsset: String = String()

  var recipientAsset: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Gateways_GetAssetBindingResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var assetBinding: Gateways_AssetBinding {
    get {return _assetBinding ?? Gateways_AssetBinding()}
    set {_assetBinding = newValue}
  }
  /// Returns true if `assetBinding` has been explicitly set.
  var hasAssetBinding: Bool {return self._assetBinding != nil}
  /// Clears the value of `assetBinding`. Subsequent reads from it will return its default value.
  mutating func clearAssetBinding() {self._assetBinding = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _assetBinding: Gateways_AssetBinding? = nil
}

/// ---
/// GetAssetBindings
/// ---
struct Gateways_GetAssetBindingsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cursor: Gateways_CursorRequest {
    get {return _cursor ?? Gateways_CursorRequest()}
    set {_cursor = newValue}
  }
  /// Returns true if `cursor` has been explicitly set.
  var hasCursor: Bool {return self._cursor != nil}
  /// Clears the value of `cursor`. Subsequent reads from it will return its default value.
  mutating func clearCursor() {self._cursor = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _cursor: Gateways_CursorRequest? = nil
}

struct Gateways_GetAssetBindingsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var assetBindings: [Gateways_AssetBinding] = []

  var cursor: Gateways_CursorResponse {
    get {return _cursor ?? Gateways_CursorResponse()}
    set {_cursor = newValue}
  }
  /// Returns true if `cursor` has been explicitly set.
  var hasCursor: Bool {return self._cursor != nil}
  /// Clears the value of `cursor`. Subsequent reads from it will return its default value.
  mutating func clearCursor() {self._cursor = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _cursor: Gateways_CursorResponse? = nil
}

/// ---
/// TransferBinding
/// ---
struct Gateways_TransferBindingRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var senderAsset: String = String()

  var recipientAsset: String = String()

  var recipientAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Gateways_TransferBindingResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var transferBinding: Gateways_TransferBinding {
    get {return _transferBinding ?? Gateways_TransferBinding()}
    set {_transferBinding = newValue}
  }
  /// Returns true if `transferBinding` has been explicitly set.
  var hasTransferBinding: Bool {return self._transferBinding != nil}
  /// Clears the value of `transferBinding`. Subsequent reads from it will return its default value.
  mutating func clearTransferBinding() {self._transferBinding = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _transferBinding: Gateways_TransferBinding? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "gateways"

extension Gateways_GetAssetBindingRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAssetBindingRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sender_asset"),
    2: .standard(proto: "recipient_asset"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.senderAsset)
      case 2: try decoder.decodeSingularStringField(value: &self.recipientAsset)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.senderAsset.isEmpty {
      try visitor.visitSingularStringField(value: self.senderAsset, fieldNumber: 1)
    }
    if !self.recipientAsset.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientAsset, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateways_GetAssetBindingRequest, rhs: Gateways_GetAssetBindingRequest) -> Bool {
    if lhs.senderAsset != rhs.senderAsset {return false}
    if lhs.recipientAsset != rhs.recipientAsset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateways_GetAssetBindingResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAssetBindingResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "asset_binding"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._assetBinding)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._assetBinding {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateways_GetAssetBindingResponse, rhs: Gateways_GetAssetBindingResponse) -> Bool {
    if lhs._assetBinding != rhs._assetBinding {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateways_GetAssetBindingsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAssetBindingsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cursor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._cursor)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._cursor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateways_GetAssetBindingsRequest, rhs: Gateways_GetAssetBindingsRequest) -> Bool {
    if lhs._cursor != rhs._cursor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateways_GetAssetBindingsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAssetBindingsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "asset_bindings"),
    2: .same(proto: "cursor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.assetBindings)
      case 2: try decoder.decodeSingularMessageField(value: &self._cursor)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.assetBindings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.assetBindings, fieldNumber: 1)
    }
    if let v = self._cursor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateways_GetAssetBindingsResponse, rhs: Gateways_GetAssetBindingsResponse) -> Bool {
    if lhs.assetBindings != rhs.assetBindings {return false}
    if lhs._cursor != rhs._cursor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateways_TransferBindingRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransferBindingRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sender_asset"),
    2: .standard(proto: "recipient_asset"),
    3: .standard(proto: "recipient_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.senderAsset)
      case 2: try decoder.decodeSingularStringField(value: &self.recipientAsset)
      case 3: try decoder.decodeSingularStringField(value: &self.recipientAddress)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.senderAsset.isEmpty {
      try visitor.visitSingularStringField(value: self.senderAsset, fieldNumber: 1)
    }
    if !self.recipientAsset.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientAsset, fieldNumber: 2)
    }
    if !self.recipientAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientAddress, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateways_TransferBindingRequest, rhs: Gateways_TransferBindingRequest) -> Bool {
    if lhs.senderAsset != rhs.senderAsset {return false}
    if lhs.recipientAsset != rhs.recipientAsset {return false}
    if lhs.recipientAddress != rhs.recipientAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateways_TransferBindingResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransferBindingResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transfer_binding"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._transferBinding)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._transferBinding {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateways_TransferBindingResponse, rhs: Gateways_TransferBindingResponse) -> Bool {
    if lhs._transferBinding != rhs._transferBinding {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
