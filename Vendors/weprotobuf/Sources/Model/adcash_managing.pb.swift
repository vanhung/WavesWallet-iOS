    // DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: adcash_managing.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Acash_ChangeApiCredentialsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var old: Acash_ApiCredentials {
    get {return _old ?? Acash_ApiCredentials()}
    set {_old = newValue}
  }
  /// Returns true if `old` has been explicitly set.
  public var hasOld: Bool {return self._old != nil}
  /// Clears the value of `old`. Subsequent reads from it will return its default value.
  public mutating func clearOld() {self._old = nil}

  public var new: Acash_ApiCredentials {
    get {return _new ?? Acash_ApiCredentials()}
    set {_new = newValue}
  }
  /// Returns true if `new` has been explicitly set.
  public var hasNew: Bool {return self._new != nil}
  /// Clears the value of `new`. Subsequent reads from it will return its default value.
  public mutating func clearNew() {self._new = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _old: Acash_ApiCredentials? = nil
  fileprivate var _new: Acash_ApiCredentials? = nil
}

public struct Acash_ChangeSciCredentialsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var old: Acash_SciCredentials {
    get {return _old ?? Acash_SciCredentials()}
    set {_old = newValue}
  }
  /// Returns true if `old` has been explicitly set.
  public var hasOld: Bool {return self._old != nil}
  /// Clears the value of `old`. Subsequent reads from it will return its default value.
  public mutating func clearOld() {self._old = nil}

  public var new: Acash_SciCredentials {
    get {return _new ?? Acash_SciCredentials()}
    set {_new = newValue}
  }
  /// Returns true if `new` has been explicitly set.
  public var hasNew: Bool {return self._new != nil}
  /// Clears the value of `new`. Subsequent reads from it will return its default value.
  public mutating func clearNew() {self._new = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _old: Acash_SciCredentials? = nil
  fileprivate var _new: Acash_SciCredentials? = nil
}

public struct Acash_ApiCredentials {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var apiName: String = String()

  public var email: String = String()

  public var password: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Acash_SciCredentials {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sciName: String = String()

  public var email: String = String()

  public var secret: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "acash"

extension Acash_ChangeApiCredentialsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChangeApiCredentialsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "old"),
    2: .same(proto: "new"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._old)
      case 2: try decoder.decodeSingularMessageField(value: &self._new)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._old {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._new {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Acash_ChangeApiCredentialsRequest, rhs: Acash_ChangeApiCredentialsRequest) -> Bool {
    if lhs._old != rhs._old {return false}
    if lhs._new != rhs._new {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Acash_ChangeSciCredentialsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChangeSciCredentialsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "old"),
    2: .same(proto: "new"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._old)
      case 2: try decoder.decodeSingularMessageField(value: &self._new)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._old {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._new {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Acash_ChangeSciCredentialsRequest, rhs: Acash_ChangeSciCredentialsRequest) -> Bool {
    if lhs._old != rhs._old {return false}
    if lhs._new != rhs._new {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Acash_ApiCredentials: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ApiCredentials"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "api_name"),
    2: .same(proto: "email"),
    3: .same(proto: "password"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.apiName)
      case 2: try decoder.decodeSingularStringField(value: &self.email)
      case 3: try decoder.decodeSingularStringField(value: &self.password)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.apiName.isEmpty {
      try visitor.visitSingularStringField(value: self.apiName, fieldNumber: 1)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 2)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Acash_ApiCredentials, rhs: Acash_ApiCredentials) -> Bool {
    if lhs.apiName != rhs.apiName {return false}
    if lhs.email != rhs.email {return false}
    if lhs.password != rhs.password {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Acash_SciCredentials: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SciCredentials"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sci_name"),
    2: .same(proto: "email"),
    3: .same(proto: "secret"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.sciName)
      case 2: try decoder.decodeSingularStringField(value: &self.email)
      case 3: try decoder.decodeSingularStringField(value: &self.secret)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sciName.isEmpty {
      try visitor.visitSingularStringField(value: self.sciName, fieldNumber: 1)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 2)
    }
    if !self.secret.isEmpty {
      try visitor.visitSingularStringField(value: self.secret, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Acash_SciCredentials, rhs: Acash_SciCredentials) -> Bool {
    if lhs.sciName != rhs.sciName {return false}
    if lhs.email != rhs.email {return false}
    if lhs.secret != rhs.secret {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
