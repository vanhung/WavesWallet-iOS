// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: adcash_withdrawals.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Acash_StorePayerDetailsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payerDetails: Acash_PayerDetails {
    get {return _payerDetails ?? Acash_PayerDetails()}
    set {_payerDetails = newValue}
  }
  /// Returns true if `payerDetails` has been explicitly set.
  public var hasPayerDetails: Bool {return self._payerDetails != nil}
  /// Clears the value of `payerDetails`. Subsequent reads from it will return its default value.
  public mutating func clearPayerDetails() {self._payerDetails = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _payerDetails: Acash_PayerDetails? = nil
}

public struct Acash_StorePayerDetailsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var address: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Acash_PayerDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var expiryMonth: UInt32 = 0

  public var expiryYear: UInt32 = 0

  public var cardNumber: String = String()

  public var cardHolder: String = String()

  public var cardHolderCountry: String = String()

  public var cardHolderCity: String = String()

  public var cardHolderDob: String = String()

  public var cardHolderMobilePhoneNumber: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "acash"

extension Acash_StorePayerDetailsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StorePayerDetailsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "payer_details"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._payerDetails)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._payerDetails {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Acash_StorePayerDetailsRequest, rhs: Acash_StorePayerDetailsRequest) -> Bool {
    if lhs._payerDetails != rhs._payerDetails {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Acash_StorePayerDetailsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StorePayerDetailsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.address)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Acash_StorePayerDetailsResponse, rhs: Acash_StorePayerDetailsResponse) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Acash_PayerDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PayerDetails"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "expiry_month"),
    2: .standard(proto: "expiry_year"),
    3: .standard(proto: "card_number"),
    4: .standard(proto: "card_holder"),
    5: .standard(proto: "card_holder_country"),
    6: .standard(proto: "card_holder_city"),
    7: .standard(proto: "card_holder_dob"),
    8: .standard(proto: "card_holder_mobile_phone_number"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.expiryMonth)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.expiryYear)
      case 3: try decoder.decodeSingularStringField(value: &self.cardNumber)
      case 4: try decoder.decodeSingularStringField(value: &self.cardHolder)
      case 5: try decoder.decodeSingularStringField(value: &self.cardHolderCountry)
      case 6: try decoder.decodeSingularStringField(value: &self.cardHolderCity)
      case 7: try decoder.decodeSingularStringField(value: &self.cardHolderDob)
      case 8: try decoder.decodeSingularStringField(value: &self.cardHolderMobilePhoneNumber)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.expiryMonth != 0 {
      try visitor.visitSingularUInt32Field(value: self.expiryMonth, fieldNumber: 1)
    }
    if self.expiryYear != 0 {
      try visitor.visitSingularUInt32Field(value: self.expiryYear, fieldNumber: 2)
    }
    if !self.cardNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.cardNumber, fieldNumber: 3)
    }
    if !self.cardHolder.isEmpty {
      try visitor.visitSingularStringField(value: self.cardHolder, fieldNumber: 4)
    }
    if !self.cardHolderCountry.isEmpty {
      try visitor.visitSingularStringField(value: self.cardHolderCountry, fieldNumber: 5)
    }
    if !self.cardHolderCity.isEmpty {
      try visitor.visitSingularStringField(value: self.cardHolderCity, fieldNumber: 6)
    }
    if !self.cardHolderDob.isEmpty {
      try visitor.visitSingularStringField(value: self.cardHolderDob, fieldNumber: 7)
    }
    if !self.cardHolderMobilePhoneNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.cardHolderMobilePhoneNumber, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Acash_PayerDetails, rhs: Acash_PayerDetails) -> Bool {
    if lhs.expiryMonth != rhs.expiryMonth {return false}
    if lhs.expiryYear != rhs.expiryYear {return false}
    if lhs.cardNumber != rhs.cardNumber {return false}
    if lhs.cardHolder != rhs.cardHolder {return false}
    if lhs.cardHolderCountry != rhs.cardHolderCountry {return false}
    if lhs.cardHolderCity != rhs.cardHolderCity {return false}
    if lhs.cardHolderDob != rhs.cardHolderDob {return false}
    if lhs.cardHolderMobilePhoneNumber != rhs.cardHolderMobilePhoneNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
