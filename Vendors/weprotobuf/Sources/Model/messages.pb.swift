// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: messages.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Gateways_Asset {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var asset: String = String()

  public var decimals: Int32 = 0

  public var ticker: String = String()

  public var type: Gateways_Asset.TypeEnum = .crypto

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case crypto // = 0
    case fiat // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .crypto
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .crypto
      case 1: self = .fiat
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .crypto: return 0
      case .fiat: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Gateways_Asset.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Gateways_Asset.TypeEnum] = [
    .crypto,
    .fiat,
  ]
}

#endif  // swift(>=4.2)

public struct Gateways_AssetBinding {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var senderAsset: Gateways_Asset {
    get {return _senderAsset ?? Gateways_Asset()}
    set {_senderAsset = newValue}
  }
  /// Returns true if `senderAsset` has been explicitly set.
  public var hasSenderAsset: Bool {return self._senderAsset != nil}
  /// Clears the value of `senderAsset`. Subsequent reads from it will return its default value.
  public mutating func clearSenderAsset() {self._senderAsset = nil}

  public var recipientAsset: Gateways_Asset {
    get {return _recipientAsset ?? Gateways_Asset()}
    set {_recipientAsset = newValue}
  }
  /// Returns true if `recipientAsset` has been explicitly set.
  public var hasRecipientAsset: Bool {return self._recipientAsset != nil}
  /// Clears the value of `recipientAsset`. Subsequent reads from it will return its default value.
  public mutating func clearRecipientAsset() {self._recipientAsset = nil}

  public var senderAmountMin: Data = SwiftProtobuf.Internal.emptyData

  public var senderAmountMax: Data = SwiftProtobuf.Internal.emptyData

  public var taxFlat: Data = SwiftProtobuf.Internal.emptyData

  public var taxRate: Double = 0

  public var active: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _senderAsset: Gateways_Asset? = nil
  fileprivate var _recipientAsset: Gateways_Asset? = nil
}

public struct Gateways_TransferBinding {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var assetBinding: Gateways_AssetBinding {
    get {return _assetBinding ?? Gateways_AssetBinding()}
    set {_assetBinding = newValue}
  }
  /// Returns true if `assetBinding` has been explicitly set.
  public var hasAssetBinding: Bool {return self._assetBinding != nil}
  /// Clears the value of `assetBinding`. Subsequent reads from it will return its default value.
  public mutating func clearAssetBinding() {self._assetBinding = nil}

  public var addresses: [String] = []

  public var recipient: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _assetBinding: Gateways_AssetBinding? = nil
}

public struct Gateways_CursorRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var limit: Int32 = 0

  public var offset: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Gateways_CursorResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var hasNext_p: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "gateways"

extension Gateways_Asset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Asset"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "asset"),
    2: .same(proto: "decimals"),
    3: .same(proto: "ticker"),
    4: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.asset)
      case 2: try decoder.decodeSingularInt32Field(value: &self.decimals)
      case 3: try decoder.decodeSingularStringField(value: &self.ticker)
      case 4: try decoder.decodeSingularEnumField(value: &self.type)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.asset.isEmpty {
      try visitor.visitSingularStringField(value: self.asset, fieldNumber: 1)
    }
    if self.decimals != 0 {
      try visitor.visitSingularInt32Field(value: self.decimals, fieldNumber: 2)
    }
    if !self.ticker.isEmpty {
      try visitor.visitSingularStringField(value: self.ticker, fieldNumber: 3)
    }
    if self.type != .crypto {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Gateways_Asset, rhs: Gateways_Asset) -> Bool {
    if lhs.asset != rhs.asset {return false}
    if lhs.decimals != rhs.decimals {return false}
    if lhs.ticker != rhs.ticker {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateways_Asset.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CRYPTO"),
    1: .same(proto: "FIAT"),
  ]
}

extension Gateways_AssetBinding: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AssetBinding"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sender_asset"),
    2: .standard(proto: "recipient_asset"),
    3: .standard(proto: "sender_amount_min"),
    4: .standard(proto: "sender_amount_max"),
    5: .standard(proto: "tax_flat"),
    6: .standard(proto: "tax_rate"),
    7: .same(proto: "active"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._senderAsset)
      case 2: try decoder.decodeSingularMessageField(value: &self._recipientAsset)
      case 3: try decoder.decodeSingularBytesField(value: &self.senderAmountMin)
      case 4: try decoder.decodeSingularBytesField(value: &self.senderAmountMax)
      case 5: try decoder.decodeSingularBytesField(value: &self.taxFlat)
      case 6: try decoder.decodeSingularDoubleField(value: &self.taxRate)
      case 7: try decoder.decodeSingularBoolField(value: &self.active)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._senderAsset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._recipientAsset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.senderAmountMin.isEmpty {
      try visitor.visitSingularBytesField(value: self.senderAmountMin, fieldNumber: 3)
    }
    if !self.senderAmountMax.isEmpty {
      try visitor.visitSingularBytesField(value: self.senderAmountMax, fieldNumber: 4)
    }
    if !self.taxFlat.isEmpty {
      try visitor.visitSingularBytesField(value: self.taxFlat, fieldNumber: 5)
    }
    if self.taxRate != 0 {
      try visitor.visitSingularDoubleField(value: self.taxRate, fieldNumber: 6)
    }
    if self.active != false {
      try visitor.visitSingularBoolField(value: self.active, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Gateways_AssetBinding, rhs: Gateways_AssetBinding) -> Bool {
    if lhs._senderAsset != rhs._senderAsset {return false}
    if lhs._recipientAsset != rhs._recipientAsset {return false}
    if lhs.senderAmountMin != rhs.senderAmountMin {return false}
    if lhs.senderAmountMax != rhs.senderAmountMax {return false}
    if lhs.taxFlat != rhs.taxFlat {return false}
    if lhs.taxRate != rhs.taxRate {return false}
    if lhs.active != rhs.active {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateways_TransferBinding: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransferBinding"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "asset_binding"),
    2: .same(proto: "addresses"),
    3: .same(proto: "recipient"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._assetBinding)
      case 2: try decoder.decodeRepeatedStringField(value: &self.addresses)
      case 3: try decoder.decodeSingularStringField(value: &self.recipient)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._assetBinding {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.addresses.isEmpty {
      try visitor.visitRepeatedStringField(value: self.addresses, fieldNumber: 2)
    }
    if !self.recipient.isEmpty {
      try visitor.visitSingularStringField(value: self.recipient, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Gateways_TransferBinding, rhs: Gateways_TransferBinding) -> Bool {
    if lhs._assetBinding != rhs._assetBinding {return false}
    if lhs.addresses != rhs.addresses {return false}
    if lhs.recipient != rhs.recipient {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateways_CursorRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CursorRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "limit"),
    2: .same(proto: "offset"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.limit)
      case 2: try decoder.decodeSingularInt32Field(value: &self.offset)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.limit != 0 {
      try visitor.visitSingularInt32Field(value: self.limit, fieldNumber: 1)
    }
    if self.offset != 0 {
      try visitor.visitSingularInt32Field(value: self.offset, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Gateways_CursorRequest, rhs: Gateways_CursorRequest) -> Bool {
    if lhs.limit != rhs.limit {return false}
    if lhs.offset != rhs.offset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateways_CursorResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CursorResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "has_next"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.hasNext_p)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hasNext_p != false {
      try visitor.visitSingularBoolField(value: self.hasNext_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Gateways_CursorResponse, rhs: Gateways_CursorResponse) -> Bool {
    if lhs.hasNext_p != rhs.hasNext_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
