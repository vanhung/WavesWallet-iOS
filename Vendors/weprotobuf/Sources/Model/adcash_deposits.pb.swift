// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: adcash_deposits.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Acash_PaymentSystem: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case acash // = 0
  case card // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .acash
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .acash
    case 1: self = .card
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .acash: return 0
    case .card: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Acash_PaymentSystem: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Acash_PaymentSystem] = [
    .acash,
    .card,
  ]
}

#endif  // swift(>=4.2)

public struct Acash_AuthenticationData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sciName: String = String()

  public var accountEmail: String = String()

  public var signature: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Acash_RegisterOrderRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var amount: Double = 0

  public var senderAsset: String = String()

  public var address: String = String()

  public var recipientAsset: String = String()

  public var paymentSystem: Acash_PaymentSystem = .acash

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Acash_RegisterOrderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var authenticationData: Acash_AuthenticationData {
    get {return _authenticationData ?? Acash_AuthenticationData()}
    set {_authenticationData = newValue}
  }
  /// Returns true if `authenticationData` has been explicitly set.
  public var hasAuthenticationData: Bool {return self._authenticationData != nil}
  /// Clears the value of `authenticationData`. Subsequent reads from it will return its default value.
  public mutating func clearAuthenticationData() {self._authenticationData = nil}

  public var orderID: String = String()

  public var queryParameters: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _authenticationData: Acash_AuthenticationData? = nil
}

public struct Acash_ACashAsset {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var name: String = String()

  public var decimals: Int32 = 0

  public var type: Acash_ACashAsset.TypeEnum = .crypto

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case crypto // = 0
    case fiat // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .crypto
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .crypto
      case 1: self = .fiat
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .crypto: return 0
      case .fiat: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Acash_ACashAsset.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Acash_ACashAsset.TypeEnum] = [
    .crypto,
    .fiat,
  ]
}

#endif  // swift(>=4.2)

public struct Acash_GetACashAssetsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Acash_GetACashAssetsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var acashAssets: [Acash_ACashAsset] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Acash_GetACashAssetsExchangeRateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var senderAsset: String = String()

  public var recipientAsset: String = String()

  public var senderAssetAmount: Double = 0

  public var paymentSystem: Acash_PaymentSystem = .acash

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Acash_GetACashAssetsExchangeRateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var rate: Double = 0

  public var recipientAssetAmount: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "acash"

extension Acash_PaymentSystem: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ACASH"),
    1: .same(proto: "CARD"),
  ]
}

extension Acash_AuthenticationData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AuthenticationData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sci_name"),
    2: .standard(proto: "account_email"),
    3: .same(proto: "signature"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.sciName)
      case 2: try decoder.decodeSingularStringField(value: &self.accountEmail)
      case 3: try decoder.decodeSingularStringField(value: &self.signature)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sciName.isEmpty {
      try visitor.visitSingularStringField(value: self.sciName, fieldNumber: 1)
    }
    if !self.accountEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.accountEmail, fieldNumber: 2)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularStringField(value: self.signature, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Acash_AuthenticationData, rhs: Acash_AuthenticationData) -> Bool {
    if lhs.sciName != rhs.sciName {return false}
    if lhs.accountEmail != rhs.accountEmail {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Acash_RegisterOrderRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegisterOrderRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
    2: .standard(proto: "sender_asset"),
    3: .same(proto: "address"),
    4: .standard(proto: "recipient_asset"),
    5: .standard(proto: "payment_system"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.amount)
      case 2: try decoder.decodeSingularStringField(value: &self.senderAsset)
      case 3: try decoder.decodeSingularStringField(value: &self.address)
      case 4: try decoder.decodeSingularStringField(value: &self.recipientAsset)
      case 5: try decoder.decodeSingularEnumField(value: &self.paymentSystem)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.amount != 0 {
      try visitor.visitSingularDoubleField(value: self.amount, fieldNumber: 1)
    }
    if !self.senderAsset.isEmpty {
      try visitor.visitSingularStringField(value: self.senderAsset, fieldNumber: 2)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 3)
    }
    if !self.recipientAsset.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientAsset, fieldNumber: 4)
    }
    if self.paymentSystem != .acash {
      try visitor.visitSingularEnumField(value: self.paymentSystem, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Acash_RegisterOrderRequest, rhs: Acash_RegisterOrderRequest) -> Bool {
    if lhs.amount != rhs.amount {return false}
    if lhs.senderAsset != rhs.senderAsset {return false}
    if lhs.address != rhs.address {return false}
    if lhs.recipientAsset != rhs.recipientAsset {return false}
    if lhs.paymentSystem != rhs.paymentSystem {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Acash_RegisterOrderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegisterOrderResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "authentication_data"),
    2: .standard(proto: "order_id"),
    3: .standard(proto: "query_parameters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._authenticationData)
      case 2: try decoder.decodeSingularStringField(value: &self.orderID)
      case 3: try decoder.decodeSingularStringField(value: &self.queryParameters)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._authenticationData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 2)
    }
    if !self.queryParameters.isEmpty {
      try visitor.visitSingularStringField(value: self.queryParameters, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Acash_RegisterOrderResponse, rhs: Acash_RegisterOrderResponse) -> Bool {
    if lhs._authenticationData != rhs._authenticationData {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.queryParameters != rhs.queryParameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Acash_ACashAsset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ACashAsset"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "decimals"),
    4: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularInt32Field(value: &self.decimals)
      case 4: try decoder.decodeSingularEnumField(value: &self.type)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.decimals != 0 {
      try visitor.visitSingularInt32Field(value: self.decimals, fieldNumber: 3)
    }
    if self.type != .crypto {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Acash_ACashAsset, rhs: Acash_ACashAsset) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.decimals != rhs.decimals {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Acash_ACashAsset.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CRYPTO"),
    1: .same(proto: "FIAT"),
  ]
}

extension Acash_GetACashAssetsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetACashAssetsRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Acash_GetACashAssetsRequest, rhs: Acash_GetACashAssetsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Acash_GetACashAssetsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetACashAssetsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "acash_assets"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.acashAssets)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.acashAssets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.acashAssets, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Acash_GetACashAssetsResponse, rhs: Acash_GetACashAssetsResponse) -> Bool {
    if lhs.acashAssets != rhs.acashAssets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Acash_GetACashAssetsExchangeRateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetACashAssetsExchangeRateRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sender_asset"),
    2: .standard(proto: "recipient_asset"),
    3: .standard(proto: "sender_asset_amount"),
    4: .standard(proto: "payment_system"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.senderAsset)
      case 2: try decoder.decodeSingularStringField(value: &self.recipientAsset)
      case 3: try decoder.decodeSingularDoubleField(value: &self.senderAssetAmount)
      case 4: try decoder.decodeSingularEnumField(value: &self.paymentSystem)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.senderAsset.isEmpty {
      try visitor.visitSingularStringField(value: self.senderAsset, fieldNumber: 1)
    }
    if !self.recipientAsset.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientAsset, fieldNumber: 2)
    }
    if self.senderAssetAmount != 0 {
      try visitor.visitSingularDoubleField(value: self.senderAssetAmount, fieldNumber: 3)
    }
    if self.paymentSystem != .acash {
      try visitor.visitSingularEnumField(value: self.paymentSystem, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Acash_GetACashAssetsExchangeRateRequest, rhs: Acash_GetACashAssetsExchangeRateRequest) -> Bool {
    if lhs.senderAsset != rhs.senderAsset {return false}
    if lhs.recipientAsset != rhs.recipientAsset {return false}
    if lhs.senderAssetAmount != rhs.senderAssetAmount {return false}
    if lhs.paymentSystem != rhs.paymentSystem {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Acash_GetACashAssetsExchangeRateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetACashAssetsExchangeRateResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rate"),
    2: .standard(proto: "recipient_asset_amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.rate)
      case 2: try decoder.decodeSingularDoubleField(value: &self.recipientAssetAmount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rate != 0 {
      try visitor.visitSingularDoubleField(value: self.rate, fieldNumber: 1)
    }
    if self.recipientAssetAmount != 0 {
      try visitor.visitSingularDoubleField(value: self.recipientAssetAmount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Acash_GetACashAssetsExchangeRateResponse, rhs: Acash_GetACashAssetsExchangeRateResponse) -> Bool {
    if lhs.rate != rhs.rate {return false}
    if lhs.recipientAssetAmount != rhs.recipientAssetAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
